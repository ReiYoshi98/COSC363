/*========================================================================
* COSC 363  Computer Graphics (2018)
* Ray tracer
* See Lab07.pdf for details.
*=========================================================================
*/
// BUILD Command: g++ -Wall -o "%e" RayTracer.cpp Ray.cpp SceneObject.cpp Sphere.cpp Plane.cpp Cylinder.cpp Cone.cpp TextureBMP.cpp -lm -lGL -lGLU -lglut

#include <iostream>
#include <cmath>
#include <vector>
#include <glm/glm.hpp>
#include "Sphere.h"
#include "Cylinder.h"
#include "Cone.h"
#include "SceneObject.h"
#include "Ray.h"
#include <GL/glut.h>
#include "Plane.h"
#include "TextureBMP.h"

using namespace std;

const float WIDTH = 20.0;
const float HEIGHT = 20.0;
const float EDIST = 40.0;
const int NUMDIV = 500;
const int MAX_STEPS = 5;
const float XMIN = -WIDTH * 0.5;
const float XMAX =  WIDTH * 0.5;
const float YMIN = -HEIGHT * 0.5;
const float YMAX =  HEIGHT * 0.5;
const float ETA = 1.003;

TextureBMP texture;
TextureBMP background_texture;
vector<SceneObject*> sceneObjects;  //A global list containing pointers to objects in the scene

/* =============================================================================
 * The basic ray tracer (9/9)
 * Lighting: the scene must include ateast one light source and also diffuse,
   specular reflections generated by the source
 * Shawdows
 * Reflections: the scene must include at least one reflective sphere.
 * The scene must include at least one box (cube or other parallelepiped). The
   box need not be defined as a single object - it could be constructed using
   five or six separate planes.
 * There must be at least one planar surface in the scene that has a pattern or a
   "texture" on it (e.g., a chequered floor).
 * =============================================================================
 * Extra features (7/7)
 * - Primitive other then a plane, sphere or box (cyliner): 1 mark
 * Primitive other then a plane, sphere or box (cone): 1 mark
 * - Multiple light sources including multiple shawdows generated by them: 1 mark
 * - Refraction of light through an object : 1 mark
 * - Transparent object: 1 mark
 * - Texture on cylinder: 1 mark
 * - Texture on sphere: 1 mark
 * - Anti-aliasing: (1-2) marks
 * - Cylinder shear: 1 mark: does not work
 * =============================================================================
 * Report (4/4)
 * =============================================================================
 */

//---The most important function in a ray tracer! ----------------------------------
//   Computes the colour value obtained by tracing a ray and finding its
//   closest point of intersection with objects in the scene.
//----------------------------------------------------------------------------------
glm::vec3 trace(Ray ray, int step)
{
    glm::vec3 backgroundCol(0);
    glm::vec3 light(10, 40, -3); // light source
    glm::vec3 light2(-15, 30, 0); // light source 2
    glm::vec3 ambientCol(0.2);   // Ambient color of light
    glm::vec3 colorSum(0);
    glm::vec3 specular(0);

    glm::vec3 white(1);
    //float phong = 10;
    float f = 20.0;
    float transparency = 0.80;
    float lightIntensity = 0.6;

    ray.closestPt(sceneObjects);        //Compute the closest point of intersection of objects with the ray

    if(ray.xindex == -1) return backgroundCol;      //If there is no intersection return background colour

    glm::vec3 materialCol = sceneObjects[ray.xindex]->getColor(); //else return object's colour

    // normal vector on the sphere at the point of intersection
    glm::vec3 normalVector = sceneObjects[ray.xindex]->normal(ray.xpt);

    // The light vectors
    glm::vec3 lightVector = light - ray.xpt;
    glm::vec3 lightVector2 = light2 - ray.xpt;

    float lightDist = glm::length(lightVector);
    float lightDist2 = glm::length(lightVector2);

    // Convert light vector to a unit vector
    lightVector = glm::normalize(lightVector);
    lightVector2 = glm::normalize(lightVector2);

    Ray shadow(ray.xpt, lightVector);
    shadow.closestPt(sceneObjects);
    Ray shadow2(ray.xpt, lightVector2);
    shadow2.closestPt(sceneObjects);

    // Compute the dot product of the light vector and the normal vector
    float lDotn = dot(lightVector, normalVector);
    float lDotn2 = dot(lightVector2, normalVector);

    // Compute specular reflections
    glm::vec3 reflVector = glm::reflect(-lightVector, normalVector);
    glm::vec3 reflVector2 = glm::reflect(-lightVector2, normalVector);

    // Computer the specular term
    float rDotv = dot(reflVector, -ray.dir);
    float rDotv2 = dot(reflVector2, -ray.dir);

    if (rDotv >= 0) specular = pow(rDotv, f) * white;
    if (rDotv2 >= 0) specular = pow(rDotv2, f) * white;

    //--------- Texture for sphere -------------------------------------
    if(ray.xindex == 2)
    {
        glm::vec3 center(6.0, -2.0, -60.0);
        glm::vec3 d = glm::normalize(ray.xpt - center);
        float u = (0.5 - atan2(d.z, d.x) + M_PI) / (2 * M_PI);
        float v = 0.5 + asin(d.y) / M_PI;
        materialCol = texture.getColorAt(u, v);
    }

    //--------- Chequered Pattern Texture for floor plane --------------
    if(ray.xindex == 3)
    {
        int texcoords = (int)((ray.xpt.x + 50) / 8) % 2;
        int texcoordt = (int)((ray.xpt.z + 200) / 8) % 2;
        if((texcoords && texcoordt) || (!texcoords && !texcoordt)){
           materialCol = glm::vec3(0,0.5,0.5);
           } else {
           materialCol = glm::vec3(0.75,0.75,0);
           }

        //----------- Reflection for floor plane -----------------------
        glm::vec3 reflectedDir = glm::reflect(ray.dir, normalVector);
        Ray reflectedRay(ray.xpt, reflectedDir);
        glm::vec3 reflectedCol = trace(reflectedRay, step + 1); //Recursion!
        colorSum = colorSum + (0.5f * reflectedCol);
    }

    //---------- Background texture ------------------------------------
    if(ray.xindex == 4)
    {
        float s = (ray.xpt.x + 50) / 100;
        float t = (ray.xpt.y + 20) / 70;

        materialCol = background_texture.getColorAt(s,t);
        return materialCol;
    }

    //--------- Texture pattern for cylinder ---------------------------
    if(ray.xindex == 5)
    {
        if (int(ray.xpt.y - 5) % 2 == 0){
            materialCol += glm::vec3(0, 0, 0); // Black
        } else{
            materialCol += glm::vec3(1, 0.3, 0); // Orange
        }
   }

    //---------- Shawdow for light 1 -----------------------------------
    if ((lDotn <= 0) || ((shadow.xindex > -1) && (shadow.xdist < lightDist))) colorSum += ambientCol * materialCol; // If the value of l.n. is negative, return only the ambient component
    else colorSum += ambientCol * materialCol + (lDotn * materialCol + specular) * lightIntensity; // Otherwise it should return the sum of ambient and diffuse colours

    //---------- Shadow for light 2 ------------------------------------
    if ((lDotn2 <= 0) || ((shadow2.xindex > -1) && (shadow2.xdist < lightDist2))) colorSum += ambientCol * materialCol;
    else colorSum += ambientCol * materialCol + (lDotn2 * materialCol + specular) * (1-lightIntensity);

    // -------- Reflection on first sphere -----------------------------
    if(ray.xindex == 0 && step < MAX_STEPS)
    {
        glm::vec3 reflectedDir = glm::reflect(ray.dir, normalVector);
        Ray reflectedRay(ray.xpt, reflectedDir);
        glm::vec3 reflectedCol = trace(reflectedRay, step + 1); //Recursion!
        colorSum = colorSum + (0.8f * reflectedCol);
    }

    // --------- Refraction with transparency on second sphere ---------
    if(ray.xindex == 1 && step < MAX_STEPS)
    {
        glm::vec3 refractedDir = glm::refract(ray.dir, normalVector, 1.0f/ETA);
        Ray refractedRay(ray.xpt, refractedDir);
        refractedRay.closestPt(sceneObjects);
        if (refractedRay.xindex == -1) return backgroundCol;

        glm::vec3 normalVector2 = sceneObjects[refractedRay.xindex]->normal(refractedRay.xpt);
        glm::vec3 refractedDir2 = glm::refract(refractedDir, -normalVector2, ETA);
        Ray refractedRay2(refractedRay.xpt, refractedDir2);
        refractedRay2.closestPt(sceneObjects);
        if (refractedRay2.xindex == -1) return backgroundCol;

        glm::vec3 refractedCol = trace(refractedRay2, step + 1); //Recursion!
        colorSum += colorSum * transparency + refractedCol * (transparency);
    }
    return colorSum;
}

//---The anti-aliasing module -----------------------------------------------------------
// In a ray tracing algorithm samples the light filed with a finite set of rays which are
// generated through the discretized image space. Distorts the artefacts such as jagged
// edges of polygons and shadows in the scene.
//---------------------------------------------------------------------------------------
glm::vec3 anti_aliasing(glm::vec3 eye, float pixels, float xp, float yp)
{
    float quarter = pixels * 0.25;
    float three_quarter = pixels * 0.75;

    glm::vec3 colorSum(0);
    glm::vec3 average(0.25);

    Ray ray = Ray(eye, glm::vec3(xp + quarter, yp + quarter, -EDIST));
    ray.normalize();
    colorSum += trace(ray, 1);

    ray = Ray(eye, glm::vec3(xp + quarter, yp + three_quarter, -EDIST));
    ray.normalize();
    colorSum += trace(ray, 1);

    ray = Ray(eye, glm::vec3(xp + three_quarter, yp + quarter, -EDIST));
    ray.normalize();
    colorSum += trace(ray, 1);

    ray = Ray(eye, glm::vec3(xp + three_quarter, yp + three_quarter, -EDIST));
    ray.normalize();
    colorSum += trace(ray, 1);

    colorSum*= average;
    return colorSum;
}

//---The main display module -----------------------------------------------------------
// In a ray tracing application, it just displays the ray traced image by drawing
// each cell as a quad.
//---------------------------------------------------------------------------------------
void display()
{
    float xp, yp;  //grid point
    float cellX = (XMAX-XMIN)/NUMDIV;  //cell width
    float cellY = (YMAX-YMIN)/NUMDIV;  //cell height

    glm::vec3 eye(0., 0., 0.);  //The eye position (source of primary rays) is the origin

    glClear(GL_COLOR_BUFFER_BIT);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    glBegin(GL_QUADS);  //Each cell is a quad.

    for(int i = 0; i < NUMDIV; i++)     //For each grid point xp, yp
    {
        xp = XMIN + i * cellX;
        for(int j = 0; j < NUMDIV; j++)
        {
            yp = YMIN + j*cellY;

            glm::vec3 dir(xp+0.5*cellX, yp+0.5*cellY, -EDIST);  //direction of the primary ray

            Ray ray = Ray(eye, dir);        //Create a ray originating from the camera in the direction 'dir'
            ray.normalize();                //Normalize the direction of the ray to a unit vector
            //glm::vec3 col = trace (ray, 1); //Trace the primary ray and get the colour value
            glm::vec3 col = anti_aliasing(eye, cellX, xp, yp); //Trace the primary ray with anti-aliasing algorithm

            glColor3f(col.r, col.g, col.b);
            glVertex2f(xp, yp);             //Draw each cell with its color value
            glVertex2f(xp+cellX, yp);
            glVertex2f(xp+cellX, yp+cellY);
            glVertex2f(xp, yp+cellY);
        }
    }

    glEnd();
    glFlush();
}

void drawCube(float x, float y, float z, float length, float width, float height, glm::vec3 color)
{
    // create the vertices
    // vertices for the front plane
    glm::vec3 a = glm::vec3(x, y, z);
    glm::vec3 b = glm::vec3(x + length, y, z);
    glm::vec3 c = glm::vec3(x + length, y + height, z);
    glm::vec3 d = glm::vec3(x, y + height, z);
    // vertices for the back plane
    glm::vec3 e = glm::vec3(x, y, z - width);
    glm::vec3 f = glm::vec3(x + length, y, z - width);
    glm::vec3 g = glm::vec3(x + length, y + height, z - width);
    glm::vec3 h = glm::vec3(x, y + height, z - width);

    // drawing the cube with planes
    Plane *frontPlane = new Plane(a, b, c, d, color);
    Plane *leftPlane = new Plane(b, f, g, c, color);
    Plane *backPlane = new Plane(f, e, h, g, color);
    Plane *rightPlane = new Plane(e, a, d, h, color);
    Plane *topPlane = new Plane(d, c, g, h, color);
    Plane *bottomPlane = new Plane(a, b, f, e, color);

    // add to scene objects
    sceneObjects.push_back(frontPlane);
    sceneObjects.push_back(leftPlane);
    sceneObjects.push_back(backPlane);
    sceneObjects.push_back(rightPlane);
    sceneObjects.push_back(topPlane);
    sceneObjects.push_back(bottomPlane);
}

//---This function initializes the scene -------------------------------------------
//   Specifically, it creates scene objects (spheres, planes, cones, cylinders etc)
//     and add them to the list of scene objects.
//   It also initializes the OpenGL orthographc projection matrix for drawing the
//     the ray traced image.
//----------------------------------------------------------------------------------
void initialize()
{
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(XMIN, XMAX, YMIN, YMAX);
    glClearColor(0, 0, 0, 1);

    //-- Initialize textures
    texture = TextureBMP((char*)"woodTexture.bmp");
    background_texture = TextureBMP((char*)"background.bmp");

    //-- Draw plane
    Plane *plane = new Plane (glm::vec3(-50., -20, -40), //Point A
                                glm::vec3(50., -20, -40), //Point B
                                glm::vec3(50., -20, -200), //Point C
                                glm::vec3(-50., -20, -200), //Point D
                                glm::vec3(0.8)); //Colour

    Plane *back_plane = new Plane (glm::vec3(-50., -20, -200),//Point A
                            glm::vec3(50., -20, -200),//Point B
                            glm::vec3(50., 50, -200),//Point C
                            glm::vec3(-50., 50, -200),//Point D
                            glm::vec3(1,1,1));//Colour


    //-- Create a pointer to a sphere object
    Sphere *sphere1 = new Sphere(glm::vec3(-5.0, -5.0, -110.0), 10.0, glm::vec3(0, 1, 0));

    //-- Create a pointer to a second sphere object
    Sphere *sphere2 = new Sphere(glm::vec3(2.0, -14.0, -95.0), 5.0, glm::vec3(0, 0, 1));

    //-- Create a pointer to a third sphere object
    Sphere *sphere3 = new Sphere(glm::vec3(6.0, -2.0, -60.0), 2.5, glm::vec3(0, 0, 0));

    //-- Create a pointer to a cylindar object
    Cylinder *cylinder = new Cylinder(glm::vec3(-20.0, -20, -110.0), 3, 20.0, glm::vec3(0, 0, 0));

    //-- Create a pointer to a cone object
    Cone *cone = new Cone(glm::vec3(25, -20, -140), 5, 30.0, glm::vec3(0.4, 0.7, 0.8));

    //--Add the above to the list of scene objects.
    sceneObjects.push_back(sphere1); // 0

    //--Add the above to the list of scene objects.
    sceneObjects.push_back(sphere2); // 1

    //--Add the above to the list of scene objects.
    sceneObjects.push_back(sphere3); // 2

    //--Add the plane to the list of scene objects.
    sceneObjects.push_back(plane); // 3

    //--Add the plane to the list of scene objects.
    sceneObjects.push_back(back_plane); // 4

    //--Add the cylinder to the list of scene objects.
    sceneObjects.push_back(cylinder); // 5

    //--Add the cone to the list of scene objects.
    sceneObjects.push_back(cone); // 6

    // Draw cube
    drawCube(10, -20, -100, 7, 7, 7, glm::vec3(1, 0, 0));
}

int main(int argc, char *argv[]) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB );
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(20, 20);
    glutCreateWindow("Raytracer");

    glutDisplayFunc(display);
    initialize();

    glutMainLoop();
    return 0;
}
